{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4pZr-Z12jh71"
      },
      "outputs": [],
      "source": [
        "# =======================\n",
        "# SmartPark UdeA\n",
        "# Sistema de gestión de parqueadero\n",
        "# =======================\n",
        "\n",
        "import re           # Para validaciones con expresiones regulares (placas)\n",
        "import csv          # Para exportar datos a archivos CSV\n",
        "import time         # Para medir duración de acciones\n",
        "from datetime import datetime  # Para registrar fechas y horas exactas\n",
        "import platform     # Para obtener información del sistema (para el log)\n",
        "import getpass      # Para obtener el usuario actual del sistema\n",
        "\n",
        "# =======================\n",
        "# 1. ANÁLISIS DE REQUERIMIENTOS\n",
        "# =======================\n",
        "# El sistema debe permitir:\n",
        "# - Registrar usuarios con validaciones estrictas.\n",
        "# - Ingresar y retirar vehículos, registrando hora exacta.\n",
        "# - Calcular cobros por hora y fracciones.\n",
        "# - Generar reportes administrativos.\n",
        "# - Exportar datos a CSV.\n",
        "# - Guardar logs detallados con fecha y duración de cada acción.\n",
        "\n",
        "# =======================\n",
        "# 2. DISEÑO DEL SISTEMA\n",
        "# =======================\n",
        "# Estructura de datos:\n",
        "# - usuarios: dict con clave = documento\n",
        "# - vehiculos_en_parqueo: dict con clave = placa\n",
        "# - vehiculos_retirados: lista de dicts\n",
        "# - log_eventos: lista de strings\n",
        "\n",
        "usuarios = {}  # Almacena la información personal y placa de cada usuario\n",
        "vehiculos_en_parqueo = {}  # Registra vehículos actualmente en el parqueadero\n",
        "vehiculos_retirados = []  # Lista de vehículos que han sido retirados\n",
        "log_eventos = []  # Lista de strings que documentan cada acción del sistema\n",
        "admin_credenciales = {'admin': '1234'}  # Usuario y contraseña del administrador\n",
        "MAX_CUPOS = 64  # Número máximo de vehículos permitidos en el parqueadero\n",
        "\n",
        "# =======================\n",
        "# FUNCIONES AUXILIARES\n",
        "# =======================\n",
        "\n",
        "def log_evento(accion):\n",
        "    inicio = time.time()  # Inicio de la acción (para medir duración)\n",
        "    timestamp = datetime.now()  # Fecha y hora exacta del evento\n",
        "    fin = time.time()  # Fin de la acción\n",
        "    duracion = fin - inicio  # Tiempo total que tomó ejecutar\n",
        "    resultado = f\"{timestamp.strftime('%Y-%m-%d %H:%M:%S.%f')}\\t{accion}\\t{duracion:.6f} segundos\"\n",
        "    log_eventos.append(resultado)  # Se guarda en el historial de logs\n",
        "    print(f\"[LOG] Acción: '{accion}' registrada en {duracion:.6f} segundos.\")\n",
        "\n",
        "def validar_nombre(nombre):\n",
        "    # Verifica que el nombre tenga mínimo 3 letras y que sean solo letras\n",
        "    return len(nombre) >= 3 and nombre.isalpha()\n",
        "\n",
        "def validar_documento(documento):\n",
        "    # Debe contener solo números y tener entre 3 y 15 dígitos\n",
        "    return documento.isdigit() and 3 <= len(documento) <= 15\n",
        "\n",
        "def validar_placa(placa):\n",
        "    # Validación de placa tipo AAA123 (3 letras + 3 números)\n",
        "    return bool(re.match(r\"^[A-Z]{3}\\d{3}$\", placa))\n",
        "\n",
        "# =======================\n",
        "# 3. PROGRAMACIÓN DEL MÓDULO DE REGISTRO\n",
        "# =======================\n",
        "\n",
        "def registrar_usuario():\n",
        "    print(\"\\n--- Registro de Usuario ---\\n\")\n",
        "    nombre = input(\"Ingrese nombre: \").strip()\n",
        "    apellido = input(\"Ingrese apellido: \").strip()\n",
        "    documento = input(\"Ingrese documento: \").strip()\n",
        "    placa = input(\"Ingrese placa (AAA111): \").strip().upper()  # Convierte la placa a mayúsculas\n",
        "\n",
        "    errores = []\n",
        "    # Se valida cada campo y se acumulan los errores\n",
        "    if not validar_nombre(nombre): errores.append(\"Nombre inválido\")\n",
        "    if not validar_nombre(apellido): errores.append(\"Apellido inválido\")\n",
        "    if not validar_documento(documento): errores.append(\"Documento inválido\")\n",
        "    if not validar_placa(placa): errores.append(\"Placa inválida\")\n",
        "\n",
        "    if errores:\n",
        "        print(\"\\nErrores encontrados:\\n\")\n",
        "        for error in errores:\n",
        "            print(\"-\", error)\n",
        "        return  # Sale de la función si hay errores\n",
        "\n",
        "    if documento in usuarios:\n",
        "        print(\"\\nUsuario ya registrado.\")  # No permite duplicar registros\n",
        "        return\n",
        "\n",
        "    # Se guarda el nuevo usuario en el diccionario\n",
        "    usuarios[documento] = {\n",
        "        'nombre': nombre,\n",
        "        'apellido': apellido,\n",
        "        'placa': placa\n",
        "    }\n",
        "    print(\"\\nUsuario registrado exitosamente.\\n\")\n",
        "    log_evento(\"Registrar Usuario\")  # Se registra en el log\n",
        "\n",
        "# =======================\n",
        "# 4. PROGRAMACIÓN DEL MÓDULO DE COBROS (Ingreso y Retiro)\n",
        "# =======================\n",
        "\n",
        "def ingresar_vehiculo():\n",
        "    print(\"\\n--- Ingreso de Vehículo ---\\n\")\n",
        "    documento = input(\"Ingrese documento del usuario: \").strip()\n",
        "\n",
        "    if documento not in usuarios:\n",
        "        print(\"\\nUsuario no registrado.\")  # Se verifica si el usuario existe\n",
        "        return\n",
        "\n",
        "    if len(vehiculos_en_parqueo) >= MAX_CUPOS:\n",
        "        print(\"\\nParqueadero lleno.\")  # No se permite el ingreso si no hay cupos\n",
        "        return\n",
        "\n",
        "    placa = usuarios[documento]['placa']\n",
        "    if placa in vehiculos_en_parqueo:\n",
        "        print(\"\\nEl vehículo ya está en el parqueadero.\")  # Evita duplicar ingresos\n",
        "        return\n",
        "\n",
        "    hora_ingreso = datetime.now()  # Hora actual\n",
        "    vehiculos_en_parqueo[placa] = {\n",
        "        'documento': documento,\n",
        "        'hora_ingreso': hora_ingreso\n",
        "    }\n",
        "    print(f\"\\nVehículo con placa {placa} ingresó a las {hora_ingreso.strftime('%H:%M:%S')}.\\n\")\n",
        "    log_evento(\"Ingresar Vehículo\")  # Se guarda en el log\n",
        "\n",
        "def retirar_vehiculo():\n",
        "    print(\"\\n--- Retiro de Vehículo ---\\n\")\n",
        "    placa = input(\"Ingrese placa del vehículo: \").strip().upper()\n",
        "\n",
        "    if placa not in vehiculos_en_parqueo:\n",
        "        print(\"\\nVehículo no encontrado en el parqueadero.\")\n",
        "        return\n",
        "\n",
        "    ingreso = vehiculos_en_parqueo.pop(placa)  # Se elimina el vehículo del parqueadero\n",
        "    salida = datetime.now()\n",
        "    tiempo_total = salida - ingreso['hora_ingreso']  # Se calcula el tiempo total de permanencia\n",
        "    minutos = tiempo_total.total_seconds() / 60\n",
        "\n",
        "    # Cálculo del valor a pagar\n",
        "    horas = int(minutos // 60)\n",
        "    cuartos_hora = int((minutos % 60) // 15)\n",
        "    valor = horas * 7000 + cuartos_hora * 1500\n",
        "    if valor < 7000:\n",
        "        valor = 7000  # Cobro mínimo por ingreso\n",
        "\n",
        "    print(f\"\\nTiempo total: {int(minutos)} minutos\")\n",
        "    print(f\"Total a pagar: ${valor}\")\n",
        "    print(\"Recibo generado. Gracias por usar SmartPark UdeA.\\n\")\n",
        "\n",
        "    # Se almacena la información del retiro\n",
        "    vehiculos_retirados.append({\n",
        "        'placa': placa,\n",
        "        'documento': ingreso['documento'],\n",
        "        'hora_ingreso': ingreso['hora_ingreso'],\n",
        "        'hora_salida': salida,\n",
        "        'total_pagado': valor,\n",
        "        'tiempo_min': round(minutos, 6)\n",
        "    })\n",
        "    log_evento(\"Retirar Vehículo\")\n",
        "\n",
        "# =======================\n",
        "# 5. PROGRAMACIÓN DEL MÓDULO DE REPORTES (Administrador)\n",
        "# =======================\n",
        "\n",
        "def administrador():\n",
        "    print(\"\\n--- Módulo Administrador ---\\n\")\n",
        "    user = input(\"Usuario: \")\n",
        "    password = input(\"Contraseña: \")\n",
        "\n",
        "    if admin_credenciales.get(user) != password:\n",
        "        print(\"\\nAcceso denegado.\")  # Verifica usuario y contraseña\n",
        "        return\n",
        "\n",
        "    print(\"\\nAcceso concedido. Reportes:\\n\")\n",
        "    print(f\"- Total de vehículos registrados: {len(usuarios)}\")\n",
        "    print(f\"- Total de vehículos retirados: {len(vehiculos_retirados)}\")\n",
        "    print(f\"- Total de vehículos sin retirar: {len(vehiculos_en_parqueo)}\")\n",
        "    total_pago = sum(v['total_pagado'] for v in vehiculos_retirados)\n",
        "    print(f\"- Total pago de vehículos retirados: ${total_pago}\")\n",
        "\n",
        "    if vehiculos_retirados:\n",
        "        tiempos = [v['tiempo_min'] for v in vehiculos_retirados]\n",
        "        max_tiempo = max(vehiculos_retirados, key=lambda v: v['tiempo_min'])\n",
        "        min_tiempo = min(vehiculos_retirados, key=lambda v: v['tiempo_min'])\n",
        "        promedio = sum(tiempos) / len(tiempos)\n",
        "\n",
        "        print(f\"- Tiempo promedio de estancia por vehículo en el parqueadero: {promedio:.2f} min\")\n",
        "        print(f\"- Vehículo con mayor tiempo: {max_tiempo['placa']} ({max_tiempo['tiempo_min']:.2f} min)\")\n",
        "        print(f\"- Vehículo con menor tiempo: {min_tiempo['placa']} ({min_tiempo['tiempo_min']:.2f} min)\")\n",
        "\n",
        "    print(\"- Lista de usuarios:\")\n",
        "    for doc, datos in usuarios.items():\n",
        "        print(f\"  Documento: {doc}, Nombre: {datos['nombre']} {datos['apellido']}, Placa: {datos['placa']}\")\n",
        "    print(\"\")\n",
        "    log_evento(\"Acceso Admin.\")\n",
        "\n",
        "# =======================\n",
        "# 6. INTEGRACIÓN DE MÓDULOS + EXPORTACIÓN CSV\n",
        "# =======================\n",
        "\n",
        "def exportar_csv():\n",
        "    # Exporta los datos de vehículos retirados a un archivo CSV\n",
        "    with open('reporte_retirados.csv', 'w', newline='') as f:\n",
        "        writer = csv.DictWriter(f, fieldnames=['placa', 'documento', 'hora_ingreso', 'hora_salida', 'total_pagado', 'tiempo_min'])\n",
        "        writer.writeheader()\n",
        "        writer.writerows(vehiculos_retirados)\n",
        "    print(\"\\nReporte exportado como reporte_retirados.csv\\n\")\n",
        "    log_evento(\"Exportar CSV\")\n",
        "\n",
        "# =======================\n",
        "# 7. PRUEBAS DEL SISTEMA (y Log de eventos)\n",
        "# =======================\n",
        "\n",
        "def guardar_log():\n",
        "    user = getpass.getuser()  # Obtiene el nombre del usuario del sistema operativo\n",
        "    sys = platform.platform()  # Información del sistema operativo\n",
        "    with open('log_sistema.txt', 'w') as f:\n",
        "        f.write(f\"USUARIO: {user}\\nSISTEMA: {sys}\\n\\n\")\n",
        "        f.write(\"=== LOG DE EVENTOS ===\\n\\n\")\n",
        "        f.write(\"Fecha\\t\\t\\tAcción\\t\\tTiempo\\n\\n\")\n",
        "        for log in log_eventos:\n",
        "            f.write(log + \"\\n\")\n",
        "        f.write(f\"\\nTOTAL EVENTOS: {len(log_eventos)}\\n\")\n",
        "    print(\"\\nLog de eventos guardado en log_sistema.txt\\n\")\n",
        "\n",
        "# =======================\n",
        "# 8. MENÚ DE USUARIO\n",
        "# =======================\n",
        "\n",
        "def menu():\n",
        "    while True:\n",
        "        print(\"\"\"\n",
        "\\n\\n\n",
        "  _______\n",
        " /|_||_\\\\`.__\n",
        "(   _    _ _\\\\\n",
        "=`-(_)--(_)-'\n",
        "\n",
        "Bienvenido al Parqueadero \\\"SmartPark UdeA\\\"\n",
        "\n",
        "    1. Registrar Usuario\n",
        "    2. Ingresar Vehiculo\n",
        "    3. Retirar Vehiculo\n",
        "    4. Administrador\n",
        "    5. Exportar Reporte CSV\n",
        "    6. Salir\n",
        "        \"\"\")\n",
        "\n",
        "        opcion = input(\"---> Ingresar la opción: \")\n",
        "\n",
        "        # Dependiendo de la opción seleccionada, se llama la función correspondiente\n",
        "        if opcion == '1': registrar_usuario()\n",
        "        elif opcion == '2': ingresar_vehiculo()\n",
        "        elif opcion == '3': retirar_vehiculo()\n",
        "        elif opcion == '4': administrador()\n",
        "        elif opcion == '5': exportar_csv()\n",
        "        elif opcion == '6':\n",
        "            guardar_log()  # Antes de salir, guarda el log completo\n",
        "            print(\"Gracias por usar SmartPark UdeA.\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opción inválida.\")  # Validación de entrada del usuario\n",
        "\n",
        "# =======================\n",
        "# INICIO DEL PROGRAMA\n",
        "# =======================\n",
        "if __name__ == '__main__':\n",
        "    menu()  # Llama al menú principal del sistema"
      ]
    }
  ]
}
